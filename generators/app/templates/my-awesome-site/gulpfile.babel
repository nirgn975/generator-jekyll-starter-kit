'use strict';

import gulp from 'gulp';
import gulpLoadPlugins from 'gulp-load-plugins';
import runSequence from 'run-sequence';
import browserSync from 'browser-sync';

const $ = gulpLoadPlugins();

// Minify the HTML.
gulp.task('minify-html', () => {
  return gulp.src('_site/**/*.html')
    .pipe($.htmlmin({
      removeComments: true,
      collapseWhitespace: true,
      collapseBooleanAttributes: true,
      removeAttributeQuotes: true,
      removeRedundantAttributes: true,
      removeEmptyAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      removeOptionalTags: true
    }))
    .pipe(gulp.dest('_site'));
});

// Optimize images.
gulp.task('minify-images', () => {
  gulp.src('images/**/*')
    .pipe($.imagemin({
      progressive: true,
      interlaced: true
    }))
    .pipe(gulp.dest('_site/images'));
});

// Minify and add prefix to css.
gulp.task('css', () => {
  const AUTOPREFIXER_BROWSERS = [
    'ie >= 10',
    'ie_mob >= 10',
    'ff >= 30',
    'chrome >= 34',
    'safari >= 7',
    'opera >= 23',
    'ios >= 7',
    'android >= 4.4',
    'bb >= 10'
  ];

  return gulp.src('css/main.css')
    .pipe($.autoprefixer(AUTOPREFIXER_BROWSERS))
    .pipe($.cssnano())
    .pipe(gulp.dest('_site/css'));
});

<% if (includeSass || includeScss) { -%>
// Compile scss to css.
gulp.task('scss', () => {
<% if (includeSass) { -%>
    return gulp.src('sass/main.sass')
<% } -%>
<% if (includeScss) { -%>
    return gulp.src('scss/main.scss')
<% } -%>
        .pipe($.sass({
            includePaths: ['css'],
            onError: browserSync.notify
        }))
        .pipe(gulp.dest('css'));
});
<% } -%>

<% if (includePug) { -%>
// Pug (Jade) to HTML.
gulp.task('pug', () => {
  return gulp.src([
    '_includes-pug/**/*.pug',
    '!_site/node_modules/**'
  ])
  .pipe($.pug())
  .pipe(gulp.dest('_includes'));
});
<% } -%>

// Watch change in files.
gulp.task('serve', ['jekyll-build'], () => {
  browserSync.init({
    notify: false,
    // Run as an https by uncommenting 'https: true'
    // Note: this uses an unsigned certificate which on first access
    //       will present a certificate warning in the browser.
    // https: true,
    server: '_site',
    port: 3000
  });

  // Warch html changes.
  gulp.watch([
    'css/**/*.css',
    '_includes/**/*.html',
    '_layouts/**/*.html',
    '_posts/**/*.md',
    'index.html'
  ], ['jekyll-build', browserSync.reload]);

<% if (includePug) { -%>
  // Watch Pug (Jade) changes.
  gulp.watch('_includes-pug/**/*.pug', ['pug']);
<% } -%>

<% if (includeSass) { -%>
  // Watch sass changes.
  gulp.watch('sass/**/*.sass', ['scss']);
<% } -%>

<% if (includeScss) { -%>
  // Watch scss changes.
  gulp.watch('scss/**/*.scss', ['scss']);
<% } -%>
});

gulp.task('jekyll-build', [<% if (includeSass | includeScss) { -%>'scss'<% } -%>
<% if ((includeSass | includeScss) && includePug) { -%>,<% } -%>
<% if (includePug) { -%>'pug'<% } -%>], $.shell.task([ 'jekyll build' ]));

// Default task.
gulp.task('build', () =>
  runSequence(
<% if (includePug) { -%>
    'pug',
<% } -%>
<% if (includeSass | includeScss) { -%>
    'scss',
<% } -%>
    'jekyll-build',
    'minify-html',
    'css',
    'minify-images'
  )
);
